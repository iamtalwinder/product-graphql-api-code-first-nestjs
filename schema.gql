# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
Represents a product in the system, including details like name, SKU, price, and category.
"""
type Product {
  """Unique identifier of the entity."""
  _id: ID!

  """The name of the product."""
  name: String!

  """A unique stock keeping unit identifier for the product."""
  sku: String!

  """An optional description of the product."""
  description: String

  """The price of the product."""
  price: Float!

  """The category of the product. Optional."""
  category: String

  """A list of image URLs for the product. Optional."""
  images: [String]

  """A list of tags associated with the product. Optional."""
  tags: [String]

  """The date and time when the product was created."""
  createdAt: DateTime!

  """The date and time when the product was last updated."""
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GetProductsOutput {
  documents: [Product!]!
  totalCount: Float!
}

"""User entity representing a registered user."""
type User {
  """Unique identifier of the entity."""
  _id: ID!

  """The unique email address of the user."""
  email: String!

  """The first name of the user."""
  firstName: String!

  """The last name of the user."""
  lastName: String!

  """The role of the user in the system."""
  role: UserRole!
}

"""
Defines the role of a user within the system and their respective permissions.
"""
enum UserRole {
  """A customer who can view and purchase products and view their orders."""
  customer

  """
  An administrator with full privileges, including managing users and roles.
  """
  admin

  """
  A manager with administrative capabilities, except for creating or managing admins or other managers.
  """
  manager

  """
  An anonymous user who can only view products but cannot make purchases.
  """
  anonymous
}

type OrderItem {
  product: Product!
  quantity: Int!
  price: Float!
}

type Order {
  """Unique identifier of the entity."""
  _id: ID!
  user: User!
  products: [OrderItem!]!
  shippingAddress: String!
  status: OrderStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  product: Product!
}

enum OrderStatus {
  Pending
  Confirmed
  Packed
  Shipped
  Delivered
  Cancelled
}

type InventoryLocation {
  locationName: String!
  warehouseAddress: String!
  quantity: Int!
  manager: String
  notes: String
}

type Inventory {
  """Unique identifier of the entity."""
  _id: ID!
  product: Product!
  inventoryLocations: [InventoryLocation!]!
}

type GetInventoryOutput {
  documents: [Inventory!]!
  totalCount: Float!
}

type GetOrdersOutput {
  documents: [Order!]!
  totalCount: Float!
}

type AuthTokenOutput {
  accessToken: String!
  refreshToken: String!
}

type CreateUserOutput {
  """Unique identifier of the entity."""
  _id: ID!

  """The unique email address of the user."""
  email: String!

  """The first name of the user."""
  firstName: String!

  """The last name of the user."""
  lastName: String!
  role: UserRole!
}

type Query {
  getProducts(filter: ProductFilterInput, page: Int = 1, limit: Int = 20): GetProductsOutput!
  getProductById(id: String!): Product!
  getInventory(filter: InventoryFilterInput, page: Int, limit: Int): GetInventoryOutput!
  getInventoryById(id: String!): Inventory!
}

input ProductFilterInput {
  name: String
  sku: String
  description: String
  price: Float
  category: String
}

input InventoryFilterInput {
  product: String!
}

type Mutation {
  createProduct(createProductInput: CreateProductInput!): Product!
  updateProduct(id: String!, updateProductInput: UpdateProductInput!): Product!
  deleteProduct(id: String!): Boolean!
  placeOrder(placeOrderInput: PlaceOrderInput!): Order!
  getUserOrders(page: Int = 1, limit: Int = 20): GetOrdersOutput!
  getAllOrders(page: Int = 1, limit: Int = 20): GetOrdersOutput!
  createInventory(createInventoryInput: CreateInventoryInput!): Inventory!
  updateInventory(id: String!, updateInventoryInput: UpdateInventoryInput!): Inventory!
  deleteInventory(id: String!): Boolean!
  register(registerInput: RegisterInput!): AuthTokenOutput!
  login(loginInput: LoginInput!): AuthTokenOutput!
  issueAnonymousToken: AuthTokenOutput!
  createUser(createUserInput: CreateUserInput!): CreateUserOutput!
}

input CreateProductInput {
  name: String!
  sku: String!
  description: String
  price: Float!
  category: String
  images: [String]
  tags: [String]
}

input UpdateProductInput {
  name: String
  sku: String
  description: String
  price: Float
  category: String
  images: [String!]
  tags: [String!]
}

input PlaceOrderInput {
  items: [OrderItemInput!]!
  shippingAddress: String!
}

input OrderItemInput {
  productId: ID!
  quantity: Int!
}

input CreateInventoryInput {
  product: ID!
  inventoryLocations: [InventoryLocationInput!]!
}

input InventoryLocationInput {
  locationName: String!
  warehouseAddress: String!
  quantity: Int!
  manager: String
  notes: String
}

input UpdateInventoryInput {
  product: ID
  inventoryLocations: [InventoryLocationInput!]
}

input RegisterInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateUserInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  role: UserRole!
}